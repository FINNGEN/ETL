# DESCRIPTION:
# Adds to exisiting temporal cdm.stem_medical_events table with one row for each FinnGen id in Kidney registry
# This is an intermediate table used to fill other ETL tables
#
# PARAMETERS:
#
# - schema_etl_input: schema with the etl input tables

INSERT INTO @schema_etl_input.stem_medical_events
(
  FINNGENID,
  SOURCE,
  APPROX_EVENT_DAY,
  CODE1,
  CODE2,
  CODE3,
  CODE4,
  CATEGORY,
  INDEX,
  code,
  vocabulary_id,
  omop_source_concept_id,
  default_domain
)

WITH
# 1- Collect all visits from kidney registry with necesary columns.
# 1-1 Kidney disease diagnosis captured in KIDNEY_DISEASE_DIAGNOSIS_1 and KIDNEY_DISEASE_DIAGNOSIS_2 columns
# 1-2 Conditions - ANGINA_PECTORIS, HEART_ATTACK, OTHER_VASCULAR_DISEASE, STROKE, T1D, T2D and UNKNOWN_TYPE_OF_DIABETES
# 1-3 Procedures - BYPASS_OR_OTHER_PROCEDURE, LEFT_VENTRICULAR_HYPERTROPHY, HEART_FAILURE,
#     OTHER_VASCULAR_DISEASE_ENTRY, OTHER_VASCULAR_DISEASE_AMPUTATION, DYSLIPIDEMIA_DIET_TREATMENT,
#     DYSLIPIDEMIA_MEDICAL_TREATMENT, FISTULA_IN_FIRST_DIALYSIS_TREATMENT, ANTIHYPERTENSIVE_DRUG, IV_IRON,
#     OTHER_IMMUNOSUPPRESSIVE, CURRENT_FORM_OF_TREATMENT
# 1-4 Observations - SMOKING_PREVIOUS, SMOKING_CURRENT, RR_MEDICAL_TREATMENT, VITAMIN_D_TREATMENT, EPO_TREATMENT,
#     FISTULA, ESA_TREATMENT

kidney_fg_codes AS (
# 1-1 Kidney disease diagnosis captured in KIDNEY_DISEASE_DIAGNOSIS_1 and KIDNEY_DISEASE_DIAGNOSIS_2 columns
  SELECT DISTINCT FINNGENID,
         'KIDNEY' AS SOURCE,
         APPROX_VISIT_DATE,
         CASE
              WHEN STRPOS(CODE1, '*') > 0 THEN SPLIT(CODE1, '*')[OFFSET(0)]
              ELSE CODE1
         END AS CODE1,
         CASE
              WHEN STRPOS(CODE1, '*') > 0  THEN SPLIT(CODE1, '*')[OFFSET(1)]
              ELSE CAST(NULL AS STRING)
         END AS CODE2,
         CAST(NULL AS STRING) AS CODE3,
         CAST(NULL AS STRING) AS CODE4,
         CAST(NULL AS STRING) AS CATEGORY,
         CAST(INDEX AS STRING) AS INDEX
  FROM (
    SELECT *,
           DENSE_RANK() OVER(ORDER BY FINNGENID, APPROX_VISIT_DATE) AS INDEX
    FROM (
      SELECT k.*,
           CASE
                WHEN k.APPROX_EVENT_DAY IS NULL THEN CAST(CONCAT(CAST(k.YEAR AS STRING),'-12-31') AS DATE)
                ELSE k.APPROX_EVENT_DAY
           END AS APPROX_VISIT_DATE
      FROM @schema_table_kidney AS k
    )
  )
  CROSS JOIN UNNEST([KIDNEY_DISEASE_DIAGNOSIS_1,KIDNEY_DISEASE_DIAGNOSIS_2]) AS CODE1
  WHERE CODE1 IS NOT NULL
  UNION ALL
# 1-2 Conditions - ANGINA_PECTORIS, HEART_ATTACK, OTHER_VASCULAR_DISEASE, STROKE, T1D, T2D and UNKNOWN_TYPE_OF_DIABETES
  SELECT DISTINCT FINNGENID,
         CASE
              WHEN ANGINA_PECTORIS = 1 THEN 'ANGINA_PECTORIS'
              WHEN HEART_ATTACK = 1 THEN 'HEART_ATTACK'
              WHEN OTHER_VASCULAR_DISEASE = 1 THEN 'OTHER_VASCULAR_DISEASE'
              WHEN STROKE = 1 THEN 'STROKE'
              WHEN T1D = 1 THEN 'T1D'
              WHEN T2D IN (1,2) THEN 'T2D'
              WHEN UNKNOWN_TYPE_OF_DIABETES IN (1,3) THEN 'UNKNOWN_TYPE_OF_DIABETES'
         END AS SOURCE,
         APPROX_VISIT_DATE,
         CASE
              WHEN ANGINA_PECTORIS = 1  OR
                   HEART_ATTACK = 1 OR
                   OTHER_VASCULAR_DISEASE = 1 OR
                   STROKE = 1 OR
                   T1D = 1 OR
                   T2D = 1 OR
                   UNKNOWN_TYPE_OF_DIABETES = 1 THEN CAST(1 AS STRING)
              WHEN T2D = 2 THEN CAST(2 AS STRING)
              WHEN UNKNOWN_TYPE_OF_DIABETES = 3 THEN CAST(3 AS STRING)
         END AS CODE1,
         CAST(NULL AS STRING) AS CODE2,
         CAST(NULL AS STRING) AS CODE3,
         CAST(NULL AS STRING) AS CODE4,
         CAST(NULL AS STRING) AS CATEGORY,
         CAST(INDEX AS STRING) AS INDEX
  FROM (
    SELECT *,
           DENSE_RANK() OVER(ORDER BY FINNGENID, APPROX_VISIT_DATE) AS INDEX
    FROM (
      SELECT k.*,
           CASE
                WHEN k.APPROX_EVENT_DAY IS NULL THEN CAST(CONCAT(CAST(k.YEAR AS STRING),'-12-31') AS DATE)
                ELSE k.APPROX_EVENT_DAY
           END AS APPROX_VISIT_DATE
      FROM @schema_table_kidney AS k
    )
  )
  WHERE ANGINA_PECTORIS = 1 OR
        HEART_ATTACK = 1 OR
        OTHER_VASCULAR_DISEASE = 1 OR
        STROKE = 1 OR
        T1D = 1 OR
        T2D IN (1,2) OR
        UNKNOWN_TYPE_OF_DIABETES IN (1,3)
  UNION ALL
# 1-3 Procedures - BYPASS_OR_OTHER_PROCEDURE, LEFT_VENTRICULAR_HYPERTROPHY, HEART_FAILURE,
#     OTHER_VASCULAR_DISEASE_ENTRY, OTHER_VASCULAR_DISEASE_AMPUTATION, DYSLIPIDEMIA_DIET_TREATMENT,
#     DYSLIPIDEMIA_MEDICAL_TREATMENT, FISTULA_IN_FIRST_DIALYSIS_TREATMENT, ANTIHYPERTENSIVE_DRUG, IV_IRON,
#     OTHER_IMMUNOSUPPRESSIVE, CURRENT_FORM_OF_TREATMENT
  SELECT DISTINCT FINNGENID,
         CASE
              WHEN BYPASS_OR_OTHER_PROCEDURE = 1 THEN 'BYPASS_OR_OTHER_PROCEDURE'
              WHEN LEFT_VENTRICULAR_HYPERTROPHY = 1 THEN 'LEFT_VENTRICULAR_HYPERTROPHY'
              WHEN HEART_FAILURE = 1 THEN 'HEART_FAILURE'
              WHEN OTHER_VASCULAR_DISEASE_ENTRY = 1 THEN 'OTHER_VASCULAR_DISEASE_ENTRY'
              WHEN OTHER_VASCULAR_DISEASE_AMPUTATION = 1 THEN 'OTHER_VASCULAR_DISEASE_AMPUTATION'
              WHEN DYSLIPIDEMIA_DIET_TREATMENT = 1 THEN 'DYSLIPIDEMIA_DIET_TREATMENT'
              WHEN DYSLIPIDEMIA_MEDICAL_TREATMENT = 1 THEN 'DYSLIPIDEMIA_MEDICAL_TREATMENT'
              WHEN FISTULA_IN_FIRST_DIALYSIS_TREATMENT > 0 THEN 'FISTULA_IN_FIRST_DIALYSIS_TREATMENT'
              WHEN ANTIHYPERTENSIVE_DRUG = 1 THEN 'ANTIHYPERTENSIVE_DRUG'
              WHEN IV_IRON = 1 THEN 'IV_IRON'
              WHEN OTHER_IMMUNOSUPPRESSIVE = 1 THEN 'OTHER_IMMUNOSUPPRESSIVE'
              WHEN CURRENT_FORM_OF_TREATMENT > 0 THEN 'TREATMENT'
         END AS SOURCE,
         APPROX_VISIT_DATE,
         CASE
              WHEN BYPASS_OR_OTHER_PROCEDURE = 1  OR
                   LEFT_VENTRICULAR_HYPERTROPHY = 1 OR
                   HEART_FAILURE = 1 OR
                   OTHER_VASCULAR_DISEASE_ENTRY = 1 OR
                   OTHER_VASCULAR_DISEASE_AMPUTATION = 1 OR
                   DYSLIPIDEMIA_DIET_TREATMENT = 1 OR
                   DYSLIPIDEMIA_MEDICAL_TREATMENT = 1 OR
                   ANTIHYPERTENSIVE_DRUG = 1 OR
                   IV_IRON = 1 OR
                   OTHER_IMMUNOSUPPRESSIVE = 1 THEN CAST(1 AS STRING)
              WHEN FISTULA_IN_FIRST_DIALYSIS_TREATMENT > 0 THEN CAST(FISTULA_IN_FIRST_DIALYSIS_TREATMENT AS STRING)
              WHEN CURRENT_FORM_OF_TREATMENT > 0 THEN CAST(CURRENT_FORM_OF_TREATMENT AS STRING)
         END AS CODE1,
         CAST(NULL AS STRING) AS CODE2,
         CAST(NULL AS STRING) AS CODE3,
         CAST(NULL AS STRING) AS CODE4,
         CAST(NULL AS STRING) AS CATEGORY,
         CAST(INDEX AS STRING) AS INDEX
  FROM (
    SELECT *,
           DENSE_RANK() OVER(ORDER BY FINNGENID, APPROX_VISIT_DATE) AS INDEX
    FROM (
      SELECT k.*,
           CASE
                WHEN k.APPROX_EVENT_DAY IS NULL THEN CAST(CONCAT(CAST(k.YEAR AS STRING),'-12-31') AS DATE)
                ELSE k.APPROX_EVENT_DAY
           END AS APPROX_VISIT_DATE
      FROM @schema_table_kidney AS k
    )
  )
  WHERE BYPASS_OR_OTHER_PROCEDURE = 1 OR
        LEFT_VENTRICULAR_HYPERTROPHY = 1 OR
        HEART_FAILURE = 1 OR
        OTHER_VASCULAR_DISEASE_ENTRY = 1 OR
        OTHER_VASCULAR_DISEASE_AMPUTATION = 1 OR
        DYSLIPIDEMIA_DIET_TREATMENT = 1 OR
        DYSLIPIDEMIA_MEDICAL_TREATMENT = 1 OR
        FISTULA_IN_FIRST_DIALYSIS_TREATMENT > 0 OR
        ANTIHYPERTENSIVE_DRUG = 1 OR
        IV_IRON = 1 OR
        OTHER_IMMUNOSUPPRESSIVE = 1 OR
        CURRENT_FORM_OF_TREATMENT > 0
  UNION ALL
# 1-4 Observations - PREVIOUS, CURRENT, RR_MEDICAL_TREATMENT, VITAMIN_D_TREATMENT, EPO_TREATMENT,
#     FISTULA, ESA_TREATMENT, AZATHIOPRINE, CICLOSPORIN, TACROLIMUS, MYCOPHENOLATE, STEROIDS
  SELECT DISTINCT FINNGENID,
         CASE
              WHEN PREVIOUS = 1 THEN 'SMOKING_PREVIOUS'
              WHEN `CURRENT` = 1 THEN 'SMOKING_CURRENT'
              WHEN RR_MEDICAL_TREATMENT = 1 THEN 'RR_MEDICAL_TREATMENT'
              WHEN VITAMIN_D_TREATMENT = 1 THEN 'VITAMIN_D_TREATMENT'
              WHEN EPO_TREATMENT = 1 THEN 'EPO_TREATMENT'
              WHEN FISTULA > 0 THEN 'FISTULA'
              WHEN ESA_TREATMENT = 1 THEN 'ESA_TREATMENT'
              WHEN AZATHIOPRINE = 1 THEN 'AZATHIOPRINE'
              WHEN CICLOSPORIN = 1 THEN 'CICLOSPORIN'
              WHEN TACROLIMUS = 1 THEN 'TACROLIMUS'
              WHEN MYCOPHENOLATE = 1 THEN 'MYCOPHENOLATE'
              WHEN STEROIDS = 1 THEN 'STEROIDS'
         END AS SOURCE,
         APPROX_VISIT_DATE,
         CASE
              WHEN PREVIOUS = 1  OR
                   `CURRENT` = 1 OR
                   RR_MEDICAL_TREATMENT = 1 OR
                   VITAMIN_D_TREATMENT = 1 OR
                   EPO_TREATMENT = 1 OR
                   ESA_TREATMENT = 1 OR
                   AZATHIOPRINE = 1 OR
                   CICLOSPORIN = 1 OR
                   TACROLIMUS = 1 OR
                   MYCOPHENOLATE = 1 OR
                   STEROIDS = 1 THEN  CAST(1 AS STRING)
              WHEN FISTULA > 0 THEN CAST(FISTULA AS STRING)
         END AS CODE1,
         CAST(NULL AS STRING) AS CODE2,
         CAST(NULL AS STRING) AS CODE3,
         CAST(NULL AS STRING) AS CODE4,
         CAST(NULL AS STRING) AS CATEGORY,
         CAST(INDEX AS STRING) AS INDEX
  FROM (
    SELECT *,
           DENSE_RANK() OVER(ORDER BY FINNGENID, APPROX_VISIT_DATE) AS INDEX
    FROM (
      SELECT k.*,
           CASE
                WHEN k.APPROX_EVENT_DAY IS NULL THEN CAST(CONCAT(CAST(k.YEAR AS STRING),'-12-31') AS DATE)
                ELSE k.APPROX_EVENT_DAY
           END AS APPROX_VISIT_DATE
      FROM @schema_table_kidney AS k
    )
  )
  WHERE PREVIOUS = 1 OR
        `CURRENT` = 1 OR
        RR_MEDICAL_TREATMENT = 1 OR
        VITAMIN_D_TREATMENT = 1 OR
        EPO_TREATMENT = 1 OR
        FISTULA > 0 OR
        ESA_TREATMENT = 1 OR
        AZATHIOPRINE = 1 OR
        CICLOSPORIN = 1 OR
        TACROLIMUS = 1 OR
        MYCOPHENOLATE = 1 OR
        STEROIDS = 1
),
# 2- Format codes from kidney_fg_codes
kidney_fg_codes_processed AS (
  SELECT *,
         CODE1 AS FG_CODE1,
         CODE2 AS FG_CODE2,
         CODE3 AS FG_CODE3,
         CASE
          WHEN SOURCE = 'KIDNEY' AND REGEXP_CONTAINS(CODE1, r'^[0-9]') THEN 'ICD9fi'
          WHEN SOURCE = 'KIDNEY' THEN 'ICD10fi'
          ELSE 'FGVisitType'
         END AS vocabulary_id
  FROM kidney_fg_codes
)

# 3 - Add omop concept id
SELECT kfcp.FINNGENID,
       'KIDNEY' AS SOURCE,
       kfcp.APPROX_VISIT_DATE AS APPROX_EVENT_DAY,
       kfcp.FG_CODE1 AS CODE1,
       kfcp.FG_CODE2 AS CODE2,
       kfcp.FG_CODE3 AS CODE3,
       kfcp.CODE4,
       kfcp.CATEGORY,
       kfcp.INDEX,
       fgc.code,
       fgc.vocabulary_id,
       fgc.omop_concept_id AS omop_source_concept_id,
       CASE
        WHEN con.domain_id IS NOT NULL THEN con.domain_id
        ELSE 'Condition'
       END AS default_domain
FROM kidney_fg_codes_processed AS kfcp
LEFT JOIN ( SELECT SOURCE,
                   FG_CODE1,
                   FG_CODE2,
                   FG_CODE3,
                   vocabulary_id,
                   code,
                   omop_concept_id
            FROM @schema_table_codes_info ) AS fgc
ON CASE
    WHEN kfcp.SOURCE != 'KIDNEY' THEN kfcp.SOURCE = fgc.SOURCE AND
                                      kfcp.FG_CODE1 IS NOT DISTINCT FROM fgc.FG_CODE1 AND
                                      kfcp.FG_CODE2 IS NOT DISTINCT FROM fgc.FG_CODE2 AND
                                      kfcp.FG_CODE3 IS NOT DISTINCT FROM fgc.FG_CODE3
    ELSE kfcp.vocabulary_id = fgc.vocabulary_id AND
         kfcp.FG_CODE1 IS NOT DISTINCT FROM fgc.FG_CODE1 AND
         kfcp.FG_CODE2 IS NOT DISTINCT FROM fgc.FG_CODE2 AND
         kfcp.FG_CODE3 IS NOT DISTINCT FROM fgc.FG_CODE3
   END
LEFT JOIN ( SELECT concept_id, domain_id FROM @schema_vocab.concept ) AS con
ON con.concept_id = CAST(fgc.omop_concept_id AS INT64);
